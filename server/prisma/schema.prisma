// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ------------------ CONECTION ------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// ------------------ DATABSE ------------------
// User - every one that uses website has this
//      - authId determines the user's permissions
//        0 - User |  1 - Technician | 2 - Manager | 3 - Admin
//
// Technician
// Manager
// Admin
//

model User {
  id     String @id @unique @default(cuid())
  name   String
  surn   String
  email  String @unique
  pwd    String
  authId Int // 0 - User |  1 - Technician | 2 - Manager | 3 - Admin

  technician Technician?
  manager    Manager?

  tickets  Ticket[]
  comments Comment[]
}

model Technician {
  id     String @id @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId String @unique @default("FormerUser")

  serviceRequest ServiceRequest[]
}

model Manager {
  id     String @id @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId String @unique @default("FormerUser")

  serviceRequest ServiceRequest[]
}

model Ticket {
  id    String  @id @unique @default(cuid())
  name  String
  desc  String?
  state Int // 0 - open | 1 - in progress | 2 - closed | 3 - denied

  createdAt DateTime @default(now()) @db.Date

  comments Comment[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId String? @default("FormerUser")
}

model ServiceRequest {
  id   String @id @unique @default(cuid())
  name String
  desc String

  state Int // 0 - open | 1 - in progress | 2 - closed | 3 - problem

  expectedFinish DateTime
  price          Float

  createAt DateTime @default(now())

  comments Comment[]

  technician   Technician? @relation(fields: [technicianId], references: [id], onDelete: SetDefault)
  technicianId String?     @default("FormerTechnician")

  manager   Manager? @relation(fields: [managerId], references: [id], onDelete: SetDefault)
  managerId String?  @default("FormerTechnician")
}

model Comment {
  id   String @id @unique @default(cuid())
  desc String

  isService Boolean

  createAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId String? @default("FormerUser")

  ticket   Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketId String?

  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceRequestId String?
}

// TODO : is there a reason to have this ? or we just go with auth id
//        cuz theres nothing to attach on admin model tbh
// model Admin {
//  id     String @id @default(cuid())
//  userId String @unique
//  user   User   @relation(fields: [userId], references: [id])
// }
